{"version":3,"sources":["components/Map/layerStyles.js","utils/generateVectorLayer.js","components/Map/Map.js","App.js","serviceWorker.js","index.js"],"names":["outline","Style","stroke","Stroke","color","width","states","congressional","counties","generateVectorLayer","data","style","vectorSource","VectorSource","features","GeoJSON","readFeatures","VectorLayer","source","feature","getGeometry","getType","OLMap","useEffect","UsCongressional","JsonCongressional","UsCounties","JsonCounties","UsStates","JsonStates","UsOutline","JsonOutline","setVisible","getVisible","Map","layers","TileLayer","OSM","target","view","View","projection","renderer","center","zoom","document","getElementById","onclick","id","className","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2VAEMA,EAAU,CACZ,WAAc,IAAIC,IAAM,CACpBC,OAAQ,IAAIC,IAAO,CACfC,MAAO,wBACPC,MAAO,OAKbC,EAAS,CACX,aAAgB,IAAIL,IAAM,CACtBC,OAAQ,IAAIC,IAAO,CACfC,MAAO,oBACPC,MAAO,MAGf,QAAW,IAAIJ,IAAM,CACjBC,OAAQ,IAAIC,IAAO,CACfC,MAAO,mBACPC,MAAO,OAKbE,EAAgB,CAClB,aAAgB,IAAIN,IAAM,CACtBC,OAAQ,IAAIC,IAAO,CACfC,MAAO,sBACPC,MAAO,MAIf,QAAW,IAAIJ,IAAM,CACjBC,OAAQ,IAAIC,IAAO,CACfC,MAAO,sBACPC,MAAO,OAKbG,EAAW,CACb,aAAgB,IAAIP,IAAM,CACtBC,OAAQ,IAAIC,IAAO,CACfC,MAAO,uBACPC,MAAO,MAGf,QAAW,IAAIJ,IAAM,CACjBC,OAAQ,IAAIC,IAAO,CACfC,MAAO,uBACPC,MAAO,O,0BC7BJI,EAXa,SAACC,EAAMC,GAC/B,IAAMC,EAAe,IAAIC,IAAa,CAClCC,UAAW,IAAIC,KAAWC,aAAaN,KAG3C,OAAO,IAAIO,IAAY,CACnBC,OAAQN,EACRD,MAAO,SAACQ,GAAD,OAAaR,EAAMQ,EAAQC,cAAcC,e,cCsEzCC,MAjEf,WAsDE,OAnDAC,oBAAU,WAGR,IAAMC,EAAkBf,EAAoBgB,EAAmBlB,GACzDmB,EAAajB,EAAoBkB,EAAcnB,GAC/CoB,EAAWnB,EAAoBoB,EAAYvB,GAC3CwB,EAAYrB,EAAoBsB,EAAa/B,GAGnD8B,EAAUE,YAAYF,EAAUG,cAChCL,EAASI,YAAYJ,EAASK,cAC9BP,EAAWM,YAAYN,EAAWO,cAClCT,EAAgBQ,YAAYR,EAAgBS,cAGhC,IAAIC,IAAI,CAClBC,OAAQ,CACN,IAAIC,IAAU,CACZlB,OAAQ,IAAImB,MAEdb,EACAI,EACAF,EACAI,GAEFQ,OAAQ,MACRC,KAAM,IAAIC,IAAK,CAEbC,WAAY,YAEZC,SAAW,QACXC,OAAQ,EAAE,UAAW,WACrBC,KAAM,MAKVC,SAASC,eAAe,WAAWC,QAAU,WAC3CjB,EAAUE,YAAYF,EAAUG,eAElCY,SAASC,eAAe,UAAUC,QAAU,WAC1CnB,EAASI,YAAYJ,EAASK,eAEhCY,SAASC,eAAe,YAAYC,QAAU,WAC5CrB,EAAWM,YAAYN,EAAWO,eAEpCY,SAASC,eAAe,iBAAiBC,QAAU,WACjDvB,EAAgBQ,YAAYR,EAAgBS,iBAK9C,6BACE,iDACA,4BAAQe,GAAG,WAAX,mBACA,4BAAQA,GAAG,UAAX,kBACA,4BAAQA,GAAG,YAAX,oBACA,4BAAQA,GAAG,iBAAX,yBACA,yBAAKA,GAAG,MAAMC,UAAU,UCzEfC,MARf,WACE,OACE,yBAAKD,UAAU,OACb,kBAAC,EAAD,QCKcE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASZ,SAASC,eAAe,SD2H3C,kBAAmBY,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.76ff253a.chunk.js","sourcesContent":["import { Stroke, Style } from 'ol/style';\r\n\r\nconst outline = {\r\n    'LineString': new Style({\r\n        stroke: new Stroke({\r\n            color: 'rgba(43, 45, 66, 0.9)',\r\n            width: 1\r\n        })\r\n    })\r\n};\r\n\r\nconst states = {\r\n    'MultiPolygon': new Style({\r\n        stroke: new Stroke({\r\n            color: 'rgb(141,153,174 )',\r\n            width: 2\r\n        })\r\n    }),\r\n    'Polygon': new Style({\r\n        stroke: new Stroke({\r\n            color: 'rgb(141,153,174)',\r\n            width: 2\r\n        })\r\n    }),\r\n};\r\n\r\nconst congressional = {\r\n    'MultiPolygon': new Style({\r\n        stroke: new Stroke({\r\n            color: 'rgba(217,4,41, 0.7)',\r\n            width: 2\r\n        })\r\n\r\n    }),\r\n    'Polygon': new Style({\r\n        stroke: new Stroke({\r\n            color: 'rgba(217,4,41, 0.7)',\r\n            width: 2\r\n        })\r\n    }),\r\n};\r\n\r\nconst counties = {\r\n    'MultiPolygon': new Style({\r\n        stroke: new Stroke({\r\n            color: 'rgba(239,35,60, 0.3)',\r\n            width: 1\r\n        })\r\n    }),\r\n    'Polygon': new Style({\r\n        stroke: new Stroke({\r\n            color: 'rgba(239,35,60, 0.3)',\r\n            width: 1\r\n        })\r\n    }),\r\n};\r\n\r\nexport {\r\n    outline,\r\n    states,\r\n    congressional,\r\n    counties,\r\n}\r\n","import { Vector as VectorSource } from 'ol/source';\r\nimport GeoJSON from 'ol/format/GeoJSON';\r\nimport { Vector as VectorLayer } from 'ol/layer';\r\n\r\n/**\r\n * Generate a vector layer to be used with\r\n * OpenLayers map\r\n * @param {object} data - JSON file used for the vector source\r\n * @param {object} style - Object that contains styling for layer\r\n * @returns {VectorLayer}\r\n */\r\n\r\nconst generateVectorLayer = (data, style) => {\r\n    const vectorSource = new VectorSource({\r\n        features: (new GeoJSON()).readFeatures(data)\r\n    });\r\n\r\n    return new VectorLayer({\r\n        source: vectorSource,\r\n        style: (feature) => style[feature.getGeometry().getType()],\r\n    });\r\n}\r\n\r\nexport default generateVectorLayer;","import React, { useEffect } from 'react';\n\n// OpenLayers libraries\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport { Tile as TileLayer } from 'ol/layer';\nimport { OSM } from 'ol/source';\n\n// JSON data\nimport JsonOutline from '../../data/US-Outline.json';\nimport JsonStates from '../../data/US-States.json';\nimport JsonCounties from '../../data/US-Counties.json';\nimport JsonCongressional from '../../data/US-Congressional.json';\n\n// Map Styling\nimport { outline, states, congressional, counties } from './layerStyles';\n\n// Util\nimport generateVectorLayer from '../../utils/generateVectorLayer';\n\n// CSS Styling\nimport './Map.css';\nimport 'ol/ol.css';\n\nfunction OLMap() {\n\n  // Generate map with layers\n  useEffect(() => {\n\n    // Map layers\n    const UsCongressional = generateVectorLayer(JsonCongressional, congressional);\n    const UsCounties = generateVectorLayer(JsonCounties, counties);\n    const UsStates = generateVectorLayer(JsonStates, states);\n    const UsOutline = generateVectorLayer(JsonOutline, outline);\n\n    // Set layers as invisible for the map default\n    UsOutline.setVisible(!UsOutline.getVisible());\n    UsStates.setVisible(!UsStates.getVisible());\n    UsCounties.setVisible(!UsCounties.getVisible());\n    UsCongressional.setVisible(!UsCongressional.getVisible());\n\n    // Generate OpenLayers map\n    const map = new Map({\n      layers: [\n        new TileLayer({\n          source: new OSM()\n        }),\n        UsCongressional,\n        UsStates,\n        UsCounties,\n        UsOutline\n      ],\n      target: 'map',\n      view: new View({\n        // Change the projection to set the the coords as LAT/LNG\n        projection: 'EPSG:4326',\n        // Added this renderer for faster loading\n        renderer: ('webgl'),\n        center: [-97.922211, 39.381266],\n        zoom: 4\n      })\n    });\n\n    // On every on click the button, the map updates with the selected outline\n    document.getElementById('outline').onclick = function () {\n      UsOutline.setVisible(!UsOutline.getVisible());\n    };\n    document.getElementById('states').onclick = function () {\n      UsStates.setVisible(!UsStates.getVisible());\n    };\n    document.getElementById('counties').onclick = function () {\n      UsCounties.setVisible(!UsCounties.getVisible());\n    };\n    document.getElementById('congressional').onclick = function () {\n      UsCongressional.setVisible(!UsCongressional.getVisible());\n    };\n\n  })\n  return (\n    <div>\n      <h2>U.S.A Map Outline</h2>\n      <button id=\"outline\">Show US Outline</button>\n      <button id=\"states\">Show US States</button>\n      <button id=\"counties\">Show US Counties</button>\n      <button id=\"congressional\">Show US Congressional</button>\n      <div id=\"map\" className=\"map\"></div>\n    </div>\n  )\n}\nexport default OLMap;","import React from 'react';\nimport './App.css';\nimport Map from './components/Map/Map'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Map />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}